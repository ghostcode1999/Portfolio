// Helpers
// ------------------------
//*** Functions ***//
//
@use "variables" as *;

/// @function get-color($color, $shade)
///
/// Get a specific color from a colors map
///
/// @author Naim Zaaraoui
/// @access public
///
/// @param {String} $color - Color's key name
/// @param {Map} $shade - Color shade
/// @param {Map} $scheme [$active-theme] - Colors Scheme
///
/// @return {Color} - Color value mapped to the `$color` key
///
/// @example scss - Usage
///   .module {
///     color: clr("primary", "100");
///   };
///
/// @example css - CSS Output
///   .module {
///     color: hsl(216, 75%, 95%);
///   };
///
@function get-clr($color, $shade, $scheme: $active-theme) {
  $map: null;
  @if $scheme == "light" {
    $map: $light;
  } @else if $scheme == "dark" {
    $map: $dark;
  } @else if $scheme == $active-theme {
    $map: $active-theme;
  } @else {
    @error "OOps!! Unknown scheme #{$scheme}";
  }

  @if map-has-key($map, $color, $shade) {
    @return map-get($map, $color, $shade);
  } @else {
    @warn "OOps!! Colors map does not have that color" + #{$color};
    @return null;
  }
}

//##################################################################//

/// @function tint/shade-clr($color, $percentage)
///
/// Slightly lighten or darken a color
///
/// @author Naim Zaaraoui
/// @access public
///
/// @param {Color} $color - Color to tint/shade
/// @param {Number} $percentage - Percentage of `$color`
///
/// @return {Color} - Lighten/darken color
///
/// @example scss - Usage
///   .module {
///     background-color: shade-clr(#fff, 40%);
///     color: tint-clr(#000, 40%);
///   };
///
/// @example css - CSS Output
///   .module {
///     background-color: #999;
///     color: #666;
///   };
///

//** Tint a given color
@function tint-clr($color, $percentage) {
  @return mix(white, $color, $percentage);
}

//** Shade a given color
@function shade-clr($color, $percentage) {
  @return mix(black, $color, $percentage);
}

//##################################################################//

/// @function calc-rem($size)
///
/// Converts a pixel value to a rem value,
/// promoting consistent font sizing across different screen sizes and devices
///
/// @param {String} $size - The pixel value to be converted to rem
/// @require $root-size
///
/// @return {String} - A rem value representing the converted pixel size as a string
///

@function calc-rem($size) {
  $rem-size: calc($size / $root-size);
  @return $rem-size * 1rem;
}

@function fs($font-size, $map-size: sm) {
  @if map-has-key($type-scale, $map-size, $font-size) {
    @return map-get($type-scale, $map-size, $font-size);
  } @else {
    @error "OOps!! $type-scale does not have this font-size";
  }
}

@function size($size) {
  @if map-has-key($sizes, $size) {
    @return map-get($sizes, $size);
  } @else {
    @error "OOps!! $sizes does not have this size";
  }
}
